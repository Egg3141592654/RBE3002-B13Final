To run our system:

-bringup turtlebot minimal and start gmapping on a turtlebot
-robot <turtlebot-name> on local (and 'export ROS_HOSTNAME=<host ip>' if that is broken)
-bringup given lab3RvizConfig rviz configuration
-run 'rosrun dfitzgerald_lab3 lab3FakeTf.py'	(Chris Kean's fix for broken tf in ROS, which publishes the localized position as odometry)
-run 'rosrun dfitzgerald_lab3 lab3OdominitPose.py' (which republishes the spoof odometry position as the initial position)
-run 'rosrun dfitzgerald_lab3 lab3.py' to run the main program
-run 'rosrun dfitzgerald_lab3 lab3Driver.py' to run a node that drives along paths

Whenever gmapping publishes a new map, lab3.py will inflate the obstacles, detect the frontiers, find the centroid of the largest frontier, A* plan to that location from its current location, "smooth" the resulting path using the line segmentation algorithm, and publish the path. These processes are visualized in rvis.
When a new path if published, lab3Driver will start popping points of the path and driving to each point by turning in place to face the point, then driving in a straight line until it is reached. If a new path is published while it is driving, it will stop it's current driving and start driving along the new path.

